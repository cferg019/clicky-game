{"version":3,"sources":["components/NavBar.js","components/Jumbotron.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","score","topScore","message","className","href","Jumbotron","Game","characters","handleCharacterClick","map","character","class","onClick","src","process","img","alt","name","App","state","titleMessage","clicked","shuffledCharacters","shuffleArray","setState","includes","newClicked","push","newScore","length","a","i","j","Math","floor","random","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"m0BAaeA,MAVf,YAA8C,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,QAC/B,OACI,yBAAKC,UAAU,4CACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,iBACA,0BAAMD,UAAU,YAAYD,GAC5B,0BAAMC,UAAU,YAAhB,iBAAsCH,EAAtC,yBAA4DC,M,MCIzDI,MATf,WACI,OACI,yBAAKF,UAAU,aACX,wBAAIA,UAAU,aAAd,kBACA,uBAAGA,UAAU,QAAb,8E,MCYGG,MAhBf,YAAqD,IAArCC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,qBACxB,OACI,yBAAKL,UAAU,aACX,yBAAKA,UAAU,OACVI,EAAWE,KAAI,SAAAC,GAAS,OACpB,yBAAKP,UAAU,YACZ,yBAAKQ,MAAM,QACP,yBAAKC,QAAS,kBAAMJ,EAAqBE,IAAYC,MAAM,eAAeE,IAAG,UAAKC,eAAL,mBAAsCJ,EAAUK,KAAOC,IAAKN,EAAUO,eC2DhKC,E,2MA7DbC,MAAQ,CACNC,aAAc,2BACdpB,MAAO,EACPC,SAAU,EACVM,aACAc,QAAS,I,EAGXb,qBAAuB,SAACE,GACtB,IAAMY,EAAqB,EAAKC,aAAa,EAAKJ,MAAMZ,YAIxD,GAHA,EAAKiB,SAAS,CAAEjB,WAAYe,IAGxB,EAAKH,MAAME,QAAQI,SAASf,EAAUO,MAIxC,OAHA,EAAKO,SAAS,CAAEJ,aAAc,eAC9B,EAAKI,SAAS,CAAExB,MAAO,SACvB,EAAKwB,SAAS,CAAEH,QAAS,KAG3B,EAAKG,SAAS,CAAEJ,aAAc,+BAE9B,IAAMM,EAAU,YAAO,EAAKP,MAAME,SAClCK,EAAWC,KAAKjB,EAAUO,MAC1B,EAAKO,SAAS,CAAEH,QAASK,IAEzB,IAAME,EAAW,EAAKT,MAAMnB,MAAQ,EACpC,EAAKwB,SAAS,CAAExB,MAAO4B,IACnB,EAAKT,MAAMlB,SAAW2B,GACxB,EAAKJ,SAAS,CAAEvB,SAAU2B,IAIxBF,EAAWG,QAAU,EAAKV,MAAMZ,WAAWsB,SAC7C,EAAKL,SAAS,CAAEJ,aAAc,cAC9B,EAAKI,SAAS,CAAExB,MAAO,M,EAI3BuB,aAAe,SAACO,GACd,IAAK,IAAIC,EAAID,EAAED,OAAS,EAAGE,EAAI,EAAGA,IAAK,CACrC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADL,EAEtB,CAACD,EAAEE,GAAIF,EAAEC,IAAvBD,EAAEC,GAFkC,KAE9BD,EAAEE,GAF4B,KAIvC,OAAOF,G,wEAIP,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,CACEH,MAAOoC,KAAKjB,MAAMnB,MAClBC,SAAUmC,KAAKjB,MAAMlB,SACrBC,QAASkC,KAAKjB,MAAMC,eAEtB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMb,WAAY6B,KAAKjB,MAAMZ,WAAYC,qBAAsB4B,KAAK5B,4B,GAxD1D6B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpD,c","file":"static/js/main.e39cd35c.chunk.js","sourcesContent":["import React from 'react';\nimport './NavBar.css';\n\nfunction NavBar({ score, topScore, message}) {\n    return (\n        <nav className=\"navbar fixed-top justify-content-between\">\n            <a className=\"navbar-brand\" href=\"/\">Clickity Game</a>\n            <span className=\"nav-item\">{message}</span>\n            <span className=\"nav-item\">{`Score: ${score} | Top Score: ${topScore}`}</span>\n        </nav>\n    );\n}\n\nexport default NavBar;","import React from 'react';\nimport './Jumbotron.css';\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron\">\n            <h1 className=\"display-4\">Clickity Game!</h1>\n            <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n        </div>\n    );\n}\n\nexport default Jumbotron;","import React from 'react';\nimport './Game.css';\n\nfunction Game({ characters, handleCharacterClick }) {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                {characters.map(character =>\n                    (<div className=\"col-md-3\">\n                        <div class=\"card\">\n                            <img onClick={() => handleCharacterClick(character)} class=\"card-img-top\" src={`${process.env.PUBLIC_URL}/images/${character.img}`} alt={character.name} />\n                        </div>\n                    </div>)\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport './App.css';\nimport characters from './data/characters.json'\nimport NavBar from './components/NavBar'\nimport Jumbotron from './components/Jumbotron'\nimport Game from './components/Game'\n\nclass App extends Component {\n  state = {\n    titleMessage: 'Click an image to begin.',\n    score: 0,\n    topScore: 0,\n    characters,\n    clicked: []\n  }\n\n  handleCharacterClick = (character) => {\n    const shuffledCharacters = this.shuffleArray(this.state.characters)\n    this.setState({ characters: shuffledCharacters })\n\n    // Check for loss\n    if (this.state.clicked.includes(character.name)) {\n      this.setState({ titleMessage: 'You lose!!' })\n      this.setState({ score: 0 })\n      this.setState({ clicked: [] })\n      return;\n    }\n    this.setState({ titleMessage: 'Good job, keep clicking...' })\n    // Update clicked\n    const newClicked = [...this.state.clicked]\n    newClicked.push(character.name)\n    this.setState({ clicked: newClicked })\n\n    const newScore = this.state.score + 1\n    this.setState({ score: newScore })\n    if (this.state.topScore < newScore) {\n      this.setState({ topScore: newScore })\n    }\n\n    // Check for win\n    if (newClicked.length >= this.state.characters.length) {\n      this.setState({ titleMessage: 'You Win!!' })\n      this.setState({ score: 0 })\n    }\n  }\n\n  shuffleArray = (a) => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar\n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.titleMessage}\n        />\n        <Jumbotron />\n        <Game characters={this.state.characters} handleCharacterClick={this.handleCharacterClick} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}